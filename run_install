#!/bin/bash

#######################################################################################################################
# if the father is the splashscreen then will opens a new terminal

TITLE_TERMINAL=`cat name.txt`
PS_FATHER=`ps -ocommand= -p $PPID | awk -F/ '{print $NF}' | awk '{print $1}'`
[ "$PS_FATHER" == "init" ] && { gnome-terminal --disable-factory -t ${TITLE_TERMINAL} -e 'bash -c "./run_install"'; exit 0; }

#######################################################################################################################
# Library check

if [ ! -d libsh ]
then
	git clone https://github.com/architech-boards/libsh.git
	if [ ! $? -eq 0 ]
    then
	    local ZENITY_INSTALLED
        ZENITY_INSTALLED=`dpkg-query -l | grep zenity-common |& awk -F" " '{ print $1 }'`

	    if [ "${ZENITY_INSTALLED}" != "ii" ]
	    then
		    echo "Impossible to connect to internet. Please, double check your Internet connection"
	    else
		    zenity --error --text "Impossible to connect to internet. Please, double check your Internet connection"
	    fi
        exit 1
    fi
fi
cd libsh
git pull
[ $? -eq 0 ] || { internet_error; }
source lib.sh
cd ..

###########################################################################################################
# Check SUDO_PASSWORD

get_sudo_password

###########################################################################################################
# Parameters

YOCTO_DIRECTORY="yocto"
cd ..
ROOT_DIRECTORY=`pwd`
BASEROOT_SDK=${ROOT_DIRECTORY}
NR_CPUS=`grep -c ^processor /proc/cpuinfo`
WGET_TIMEOUT=60


###########################################################################################################
# Get in remote the last version of the package
# S1 url remote 

function get_remote_version {
	wget --timeout=${WGET_TIMEOUT} ${1}/version
	[ $? -eq 0 ] || { internet_error; }
	REMOTE_VERSION=`cat version`
	rm version
	debecho "remote last version of ${1} is ${REMOTE_VERSION}"
}


###########################################################################################################
# Script pre-install

cd $BASEROOT_SDK
wget --timeout=${WGET_TIMEOUT} http://downloads.architechboards.com/pengwyn/script/denzil/pre-script.sh
[ $? -eq 0 ] || { internet_error; }
chmod 777 pre-script.sh
./pre-script.sh
rm pre-script.sh

###########################################################################################################
# Versioning installation if not exist, 1 is the start version in remote server

[ ! -f conf/versions ] && { debecho "conf/versions created"; mkdir -p ${BASEROOT_SDK}/conf; echo "toolchain:0" > ${BASEROOT_SDK}/conf/versions; echo "sdk:0" >> ${BASEROOT_SDK}/conf/versions; }

###########################################################################################################
# Installing sdk enviroment

DATE_BACKUP=`date +%d%m`

# restore backup if something goes wrong
undo_backup()
{
	if [ -f ${1}.$DATE_BACKUP.tgz ]; then 
		rm -rf ${1}
		tar -zxf ${1}.$DATE_BACKUP.tgz
	fi
}

do_backup()
{
	if [ -d ${1} ]; then 
		rm ${1}.*.tgz
		tar -zcf ${1}.$DATE_BACKUP.tgz ${1}
		rm -rf ${1}
	fi
}

install_file()
{
	echo Install $CMD
	URL=`echo $LINE | awk -F"@" '{print $2}'`
	FILE=$CMD.tgz
	do_backup yocto/$CMD
	rm -rf yocto/$CMD
	wget --timeout=${WGET_TIMEOUT} ${URL}
	[ $? -eq 0 ] || { rm -f $FILE; undo_backup $CMD; rm conf/sdk.txt; internet_error; }
	tar -zxf $FILE
	find yocto/${CMD} -type f -exec sed -i "s|@BASEROOT_SDK@|${BASEROOT_SDK}|g" '{}' \;
	find yocto/${CMD} -type f -exec sed -i "s|@BASEHOME@|${HOME}|g" '{}' \;
	[ $? -eq 0 ] || { rm -f $FILE; undo_backup yocto/$CMD; rm conf/sdk.txt; internet_error; }
	rm -f $FILE
}

install_qt_local_libraries()
{
	echo Install $CMD
	URL=`echo $LINE | awk -F"@" '{print $2}'`
	FILE=$CMD.tgz
	wget --timeout=${WGET_TIMEOUT} ${URL}
	[ $? -eq 0 ] || { rm -f $FILE; rm conf/sdk.txt; internet_error; }
	do_sudo "tar -zxf $FILE -C /usr/local"
	rm -f $FILE
}

cd $ROOT_DIRECTORY

killall eclipse
killall qtcreator

get_remote_version http://downloads.architechboards.com/pengwyn/sdk/denzil
LOCAL_VERSION=`grep "sdk" conf/versions | awk -F":" '{print $2}'`
debecho "LOCAL_VERSION of sdk is ${LOCAL_VERSION}"

while [ ${LOCAL_VERSION} -lt ${REMOTE_VERSION} ] 
do
		((LOCAL_VERSION++))
		debecho "sdk install version: ${LOCAL_VERSION}/${REMOTE_VERSION}"

		# dowload script file to know what to do
		rm -f conf/sdk.txt
		wget --timeout=${WGET_TIMEOUT} -P conf http://downloads.architechboards.com/pengwyn/sdk/denzil/${LOCAL_VERSION}/sdk.txt
		[ $? -eq 0 ] || { rm conf/sdk.txt; internet_error; }

		while read LINE; do

			CMD=`echo "${LINE}" | awk -F"@" '{print $1}'`

			if [ -f conf/sdk.txt.old -a "${CMD}" != "doc" ] 
			then
				grep "${LINE}" conf/sdk.txt.old
				[ $? -eq 0 ] && { continue; }
			fi

			case  $CMD  in
						# documentation, always updates it
						"doc")
							echo "DOC"
                            URL=`echo $LINE | awk -F"@" '{print $2}'`
                            FILE=`echo $LINE | awk -F"@" '{print $3}'`
							mkdir -p docs;
							wget --timeout=${WGET_TIMEOUT} ${URL}
							[ $? -eq 0 ] || { rm -f $FILE; internet_error; }
							unzip -o $FILE -d docs
							rm -f $FILE
						;;
						# install or upgrade java runtime
						"java")
							echo "JAVA"
							URL=`echo $LINE | awk -F"@" '{print $2}'`
							FILE=`echo $LINE | awk -F"@" '{print $3}'`
							VERSION=`echo $LINE | awk -F"@" '{print $4}'`

							if [ ! -d java/$VERSION ]
							then
								do_backup "java"
								rm -rf java
								wget --timeout=${WGET_TIMEOUT} ${URL}
								[ $? -eq 0 ] || { rm -f $FILE; undo_backup "java"; rm conf/sdk.txt; internet_error; }
								mkdir java
								tar -zxf $FILE -C java
								[ $? -eq 0 ] || { rm -f $FILE; rm -rf java; undo_backup "java"; rm conf/sdk.txt; internet_error; }
								rm -f $FILE
								mv java/$VERSION/* java/
							fi
							;;
						# install
						"eclipse")
							echo Install $CMD
							URL=`echo $LINE | awk -F"@" '{print $2}'`
							FILE=`echo $LINE | awk -F"@" '{print $3}'`
							do_backup "yocto/eclipse"
							rm -rf yocto/eclipse
							wget --timeout=${WGET_TIMEOUT} ${URL}
							[ $? -eq 0 ] || { rm -f $FILE; undo_backup "yocto/eclipse"; rm conf/sdk.txt; internet_error; }
							tar -zxf $FILE
							[ $? -eq 0 ] || { rm -f $FILE; undo_backup "yocto/eclipse"; rm conf/sdk.txt; internet_error; }
							rm -f $FILE
							sed -i "s|@BASEROOT_SDK@|${BASEROOT_SDK}|g" ${BASEROOT_SDK}/splashscreen/run_eclipse
							;;
						"toolchain")
							echo Install $CMD
							URL=`echo $LINE | awk -F"@" '{print $2}'`
							FILE=`echo $LINE | awk -F"@" '{print $3}'`
							wget --timeout=${WGET_TIMEOUT} ${URL}
							[ $? -eq 0 ] || { rm -f $FILE; rm conf/sdk.txt; internet_error; }
							do_sudo "tar -zxf $FILE -C /opt"
							[ $? -eq 0 ] || { rm -f $FILE; rm conf/sdk.txt; internet_error; }
							rm -f $FILE
							do_sudo "sed -i \"s|@BASEROOT_SDK@|${BASEROOT_SDK}|g\" /opt/poky/1.2.1/environment-setup-armv7a-vfp-neon-poky-linux-gnueabi"
							[ -d sysroot ] || { mkdir sysroot; }
							;;
						"yocto")
							echo Install $CMD
							URL=`echo $LINE | awk -F"@" '{print $2}'`
							FILE=`echo $LINE | awk -F"@" '{print $3}'`
							wget --timeout=${WGET_TIMEOUT} ${URL}
							[ $? -eq 0 ] || { rm -f $FILE; rm conf/sdk.txt; internet_error; }
							tar -zxf $FILE
							[ $? -eq 0 ] || { rm -f $FILE; rm conf/sdk.txt; internet_error; }
							rm -f $FILE
							cd ${BASEROOT_SDK}/yocto
							source poky/oe-init-build-env
							set_cpu_localconf ${NR_CPUS} ./conf
							cd ${BASEROOT_SDK}
							;;
						"qt-arm")
							install_qt_local_libraries
							;;
						"qt-x86")
							install_qt_local_libraries
							;;
						"qtcreator")
							install_file
							;;
						"conf")
						# configure yocto plugin
							echo "CONF"
							URL=`echo $LINE | awk -F"@" '{print $2}'`
							FILE=`echo $LINE | awk -F"@" '{print $3}'`
							rm -f workspace
							wget --timeout=${WGET_TIMEOUT} $URL
							[ $? -eq 0 ] || { rm conf/sdk.txt; internet_error; }
							tar -zxf $FILE
							find workspace/ -type f -exec sed -i "s|@BASEROOT_SDK@|${BASEROOT_SDK}|g" '{}' \;
							rm -f $FILE
							;;
						"cmd")
						# execute a shell command from the script
							echo "CMD"
							EXECMD=`echo "${LINE}" | awk -F"@" '{print $2}'`
							${EXECMD}
							;;        
						*)
							echo ""              
				  esac
		done < conf/sdk.txt

		[ -f conf/sdk.txt ] && { mv conf/sdk.txt conf/sdk.txt.old; }
		sed -i "s|sdk:$((LOCAL_VERSION-1))|sdk:${LOCAL_VERSION}|g" conf/versions
done

###########################################################################################################
# Script post-install

cd $BASEROOT_SDK
wget --timeout=${WGET_TIMEOUT} http://downloads.architechboards.com/pengwyn/script/denzil/post-script.sh
[ $? -eq 0 ] || { internet_error; }
chmod 777 post-script.sh
./post-script.sh
rm post-script.sh

exit 0
